#include <iostream>
#include <bits/stdc++.h>
#include <vector>
#include<map>
#include <unordered_set>
#include <math.h>
#include <cstdlib>
#include <ctime>
#include <iomanip>

using namespace std;

const int k_max = 30; // 10~30
const int k_min = 10;
const int TRI = 1024*1024*1024;
const int SEARCH_TIMES = 100000;


//Skip List
//https://www.geeksforgeeks.org/skip-list-set-3-searching-deletion/
// Class to implement node
class Node
{
public:
    int key;

    // Array to hold pointers to node of different level
    Node **forward;
    Node(int, int);
};

Node::Node(int key, int level)
{
    this->key = key;

    // Allocate memory to forward
    forward = new Node*[level+1];

    // Fill forward array with 0(NULL)
    memset(forward, 0, sizeof(Node*)*(level+1));
};

// Class for Skip list
class SkipList
{
    // Maximum level for this skip list
    int MAXLVL;

    // P is the fraction of the nodes with level
    // i pointers also having level i+1 pointers
    float P;

    // current level of skip list
    int level;

    // pointer to header node
    Node *header;
public:
    SkipList(int, float);
    int randomLevel();
    Node* createNode(int, int);
    void insertElement(int);
    void deleteElement(int);
    void searchElement(int);
    void displayList();
};

SkipList::SkipList(int MAXLVL, float P)
{
    this->MAXLVL = MAXLVL;
    this->P = P;
    level = 0;

    // create header node and initialize key to -1
    header = new Node(-1, MAXLVL);
};

// create random level for node
int SkipList::randomLevel()
{
    float r = (float)rand()/RAND_MAX;
    int lvl = 0;
    while(r < P && lvl < MAXLVL)
    {
        lvl++;
        r = (float)rand()/RAND_MAX;
    }
    return lvl;
};

// create new node
Node* SkipList::createNode(int key, int level)
{
    Node *n = new Node(key, level);
    return n;
};

// Insert given key in skip list
void SkipList::insertElement(int key)
{
    Node *current = header;

    // create update array and initialize it
    Node *update[MAXLVL+1];
    memset(update, 0, sizeof(Node*)*(MAXLVL+1));

    /*    start from highest level of skip list
        move the current pointer forward while key
        is greater than key of node next to current
        Otherwise inserted current in update and
        move one level down and continue search
    */
    for(int i = level; i >= 0; i--)
    {
        while(current->forward[i] != NULL &&
              current->forward[i]->key < key)
            current = current->forward[i];
        update[i] = current;
    }

    /* reached level 0 and forward pointer to
       right, which is desired position to
       insert key.
    */
    current = current->forward[0];

    /* if current is NULL that means we have reached
       to end of the level or current's key is not equal
       to key to insert that means we have to insert
       node between update[0] and current node */
    if (current == NULL || current->key != key)
    {
        // Generate a random level for node
        int rlevel = randomLevel();

        /* If random level is greater than list's current
           level (node with highest level inserted in
           list so far), initialize update value with pointer
           to header for further use */
        if(rlevel > level)
        {
            for(int i=level+1;i<rlevel+1;i++)
                update[i] = header;

            // Update the list current level
            level = rlevel;
        }

        // create new node with random level generated
        Node* n = createNode(key, rlevel);

        // insert node by rearranging pointers
        for(int i=0;i<=rlevel;i++)
        {
            n->forward[i] = update[i]->forward[i];
            update[i]->forward[i] = n;
        }
        //cout<<"Successfully Inserted key "<<key<<"\n";
    }
};

// Delete element from skip list
void SkipList::deleteElement(int key)
{
    Node *current = header;

    // create update array and initialize it
    Node *update[MAXLVL+1];
    memset(update, 0, sizeof(Node*)*(MAXLVL+1));

    /*    start from highest level of skip list
        move the current pointer forward while key
        is greater than key of node next to current
        Otherwise inserted current in update and
        move one level down and continue search
    */
    for(int i = level; i >= 0; i--)
    {
        while(current->forward[i] != NULL  &&
              current->forward[i]->key < key)
            current = current->forward[i];
        update[i] = current;
    }

    /* reached level 0 and forward pointer to
       right, which is possibly our desired node.*/
    current = current->forward[0];

    // If current node is target node
    if(current != NULL and current->key == key)
    {
        /* start from lowest level and rearrange
           pointers just like we do in singly linked list
           to remove target node */
        for(int i=0;i<=level;i++)
        {
            /* If at level i, next node is not target
               node, break the loop, no need to move
              further level */
            if(update[i]->forward[i] != current)
                break;

            update[i]->forward[i] = current->forward[i];
        }

        // Remove levels having no elements
        while(level>0 &&
              header->forward[level] == 0)
            level--;
         //cout<<"Successfully deleted key "<<key<<"\n";
    }
};

// Search for element in skip list
void SkipList::searchElement(int key)
{
    Node *current = header;

    /*    start from highest level of skip list
        move the current pointer forward while key
        is greater than key of node next to current
        Otherwise inserted current in update and
        move one level down and continue search
    */
    for(int i = level; i >= 0; i--)
    {
        while(current->forward[i] &&
               current->forward[i]->key < key)
            current = current->forward[i];

    }

    /* reached level 0 and advance pointer to
       right, which is possibly our desired node*/
    current = current->forward[0];

    // If current node have key equal to
    // search key, we have found our target node
    if(current and current->key == key)
    {}
        //cout<<"Found key: "<<key<<"\n";
};

// Display skip list level wise
void SkipList::displayList()
{
    cout<<"\n*****Skip List*****"<<"\n";
    for(int i=0;i<=level;i++)
    {
        Node *node = header->forward[i];
        cout<<"Level "<<i<<": ";
        while(node != NULL)
        {
            cout<<node->key<<" ";
            node = node->forward[i];
        }
        cout<<"\n";
    }
};

int binarySearchForInsert(vector<int>& arr, int p, int r, int num) {
   	if (p < r)
   	{
      int mid = (p + r)/2;
      if (arr[mid] == num)
      return mid ;
      if (arr[mid] > num)
      return binarySearchForInsert(arr, p, mid-1, num);
      if (arr[mid] < num)
      return binarySearchForInsert(arr, mid+1, r, num);
   	}
	else if( p == r)
   	{
		int mid = (p+r)/2;
		if( arr[mid] == num)
			return mid;
		else if( arr[mid] > num)
			return mid;
		else
			return mid+1;
   	}
}
int binarySearch(vector<int>& arr, int p, int r, int num) {
   	if (p <= r)
   	{
      int mid = (p + r)/2;
      if (arr[mid] == num)
      return mid ;
      if (arr[mid] > num)
      return binarySearch(arr, p, mid-1, num);
      if (arr[mid] < num)
      return binarySearch(arr, mid+1, r, num);
   	}
	else
		return -1;
}
void insertionSort(vector <int>  &arr, int size){

    for (int i = size-1; i >0; i--) {
        int key = arr[i];
        int j = i - 1;
        while (key < arr[j] && j >= 0) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}
void SORTED_ARRAY()
{
	// things to count time
	clock_t start, end, insert_time,search_time;
	for( int k=k_min ; k<=k_max ; k++)
	{
		// insert
		srand(k);
		int size = (int)pow(2,k);
		vector <int> sorted_array(size);

		start = clock();
		for( int i=0 ; i<size ; i++)
		{
			int new_num = rand()%TRI +1;
			// use binary search find out where new_num should be inserted
			int position = binarySearchForInsert(sorted_array , 0 , sorted_array.size() , new_num);
			// insert new_num
			if(position < sorted_array.size())
				sorted_array.insert( sorted_array.begin()+position , new_num);
			else
				sorted_array.push_back(new_num);
		}
		end = clock();
		insert_time = end - start;
		// end of insert
		// do the search right after insert do not waste resource
		// search
		int target;
		start = clock();
		for( int i=0 ; i<SEARCH_TIMES ; i++)
		{
			 target = rand()%TRI +1;
			 binarySearch(sorted_array , 0 ,size ,target);
		}
		end = clock();
		search_time = end - start;
		//end of search

		// print result

		cout<<"Insert: "<<setprecision(3)<< double(insert_time) /( 10*CLOCKS_PER_SEC )<<"  "
		<<"Search: "<<setprecision(3)<< double(search_time) /( 10*CLOCKS_PER_SEC )<<endl;

	}
}

void SORTED_ARRAY_2()
{
	// things to count time
	clock_t start, end, insert_time,search_time;
	for( int k=k_min ; k<=k_max ; k++)
	{
		// insert
		srand(k);
		int size = (int)pow(2,k);
		vector <int> sorted_array(size);

		start = clock();
		for( int i=0 ; i<size ; i++)
		{
			int new_num = rand()%TRI +1;
			sorted_array.push_back(new_num);
			insertionSort(sorted_array , size);
		}
		end = clock();
		insert_time = end - start;
		// end of insert

		// search
		int target;
		start = clock();
		for( int i=0 ; i<SEARCH_TIMES ; i++)
		{
			 target = rand()%TRI +1;
			 binarySearch(sorted_array , 0 ,size ,target);
		}
		end = clock();
		search_time = end - start;
		//end of search

		// print result

		cout<<"Insert: "<<setprecision(3)<< double(insert_time) /( 10*CLOCKS_PER_SEC )<<"  "
		<<"Search: "<<setprecision(3)<< double(search_time) /( 10*CLOCKS_PER_SEC )<<endl;

	}
}

void MAP()
{
    clock_t start, end, insert_time,search_time;

	for( int k=k_min ; k<=k_max ; k++)
	{
		// insert
		srand(k);
		int size = (int)pow(2,k);
		map <int,int> my_map;


		start = clock();
		for( int i=0 ; i<size ; i++)
		{
			int new_num = rand()%TRI +1;
			//insert
            my_map.insert(pair<int,int>(i,new_num));
            //
		}
		end = clock();
		insert_time = end - start;
		// end of insert

		// search
		int target;
        map<int,int>::iterator iter;
		start = clock();
		for( int i=0 ; i<SEARCH_TIMES ; i++)
		{
			target = rand()%TRI +1;
			//search
            iter = my_map.find(target);
            //
		}
		end = clock();
		search_time = end - start;
		//end of search

		// print result
		cout << "2^"<< k <<" data of a map : "<<"\n";
		cout<<"Insert: "<<setprecision(3)<< double(insert_time) /( 10*CLOCKS_PER_SEC )<<"  "
		<<"Search: "<<setprecision(3)<< double(search_time) /( 10*CLOCKS_PER_SEC )<<endl;

	}
}

void SKIP_LIST()
{
    clock_t start, end, insert_time,search_time;
	cout<<"From 2^"<<k_min <<" to 2^"<< k_max<<endl;
	for( int k=k_min ; k<=k_max ; k++)
	{
		// insert
		srand(k);
		int size = (int)pow(2,k);
		SkipList slst(k,0.5);


		start = clock();
		for( int i=0 ; i<size ; i++)
		{
			int new_num = rand()%TRI +1;
			//insert
			slst.insertElement(new_num);
            //
		}
		end = clock();
		insert_time = end - start;
		// end of insert

		// search
		int target;
		start = clock();
		for( int i=0 ; i<SEARCH_TIMES ; i++)
		{
			target = rand()%TRI +1;
			//search
			slst.searchElement(target);
            //
		}
		end = clock();
		search_time = end - start;
		//end of search

		// print result
		cout<<setprecision(3)<< double(insert_time) /( 10*CLOCKS_PER_SEC )<<" "
		<<setprecision(3)<< double(search_time) /( 10*CLOCKS_PER_SEC )<<endl;

	}
}

void UNORDERED_SET()
{
    clock_t start, end, insert_time,search_time;

	for( int k=k_min ; k<=k_max ; k++)
	{
		// insert
		srand(k);
		int size = (int)pow(2,k);
		unordered_set<int> unset;


		start = clock();
		for( int i=0 ; i<size ; i++)
		{
			int new_num = rand()%TRI +1;
			//insert
            unset.insert(new_num);
            //
		}
		end = clock();
		insert_time = end - start;
		// end of insert

		// search
		int target;
		start = clock();
		for( int i=0 ; i<SEARCH_TIMES ; i++)
		{
			target = rand()%TRI +1;
			//search
			unset.find(target);
            //
		}
		end = clock();
		search_time = end - start;
		//end of search

		// print result
		cout<<setprecision(3)<< double(insert_time) /( 10*CLOCKS_PER_SEC )<<" "
		<<setprecision(3)<< double(search_time) /( 10*CLOCKS_PER_SEC )<<endl;

	}
}

int main()
{
//	SORTED_ARRAY();
//	MAP();
//	SKIP_LIST();
	UNORDERED_SET();
	return 0;
}
